ggplot(houst, aes(x = date, y = HOUST)) + geom_line()
ggplot(houst, aes(x = date, y = HOUST)) +
geom_line(colour = "blue")
ggplot(houst, aes(x = date, y = HOUST)) +
geom_line(colour = "blue") + + xlab("")
ggplot(houst, aes(x = date, y = HOUST)) +
geom_line(colour = "blue") +  xlab("")
ggplot(houst, aes(x = date, y = HOUST)) +
geom_line(colour = "blue") +  xlab("")
ggplot(houst, aes(x = date, y = HOUST)) +
geom_line(colour = "blue", size = 2) +  xlab("") +
ggplot(houst, aes(x = date, y = HOUST)) +
geom_line(colour = "blue", size = 2) +  xlab("") + geom_smooth
ggplot(houst, aes(x = date, y = HOUST)) +
geom_line(colour = "blue", size = 2) +  xlab("") + geom_smooth
ggplot(houst, aes(x = date, y = HOUST)) +
geom_line(colour = "blue", size = 2) +  xlab("")
ggplot(houst, aes(x = date, y = HOUST)) +
geom_line(colour = "blue", size = 1.5) +  xlab("")
ggplot(houst, aes(x = date, y = HOUST)) +
geom_line(colour = "blue", size = 1.25) +  xlab("")
windows.options(antialias = "cleartype")
rm(list = ls())
library(quantmod)
library(ggplot2)
theme_set(theme_bw(base_size = 18))
getSymbols('HOUST', src='FRED')
houst <- data.frame(date = as.Date(index(HOUST)), houst = HOUST)
ggplot(houst, aes(x = date, y = HOUST)) +
geom_line(colour = "blue", size = 1.25) +  xlab("")
options(device = Cairo::CairoWin)
getSymbols(c('HOUST', 'COMPUTSA'), src='FRED')
houscomp <- data.frame(date = as.Date(index(COMPUTSA)), houst = COMPUTSA)
houst <- data.frame(date = as.Date(index(HOUST)), houst = HOUST)
housing_data <- merge(houst, houscomp, by = "date")
housing_data
ggplot(housing_data, aes(x = date, y = data)) +
geom_line(colour = "blue", size = 1.25) +  xlab("")
library(reshape2)
theme_set(theme_bw(base_size = 18))
getSymbols(c('HOUST', 'COMPUTSA'), src='FRED')
houscomp <- data.frame(date = as.Date(index(COMPUTSA)), houst = COMPUTSA)
houst <- data.frame(date = as.Date(index(HOUST)), houst = HOUST)
data_long <- melt(housing_data, id.vars = "date")
ggplot(data_long, aes(x = date, y = variable)) +
geom_line(colour = "blue", size = 1.25) +  xlab("")
View(housing_data)
ggplot(data_long, aes(x = date, y = value)) +
geom_line(colour = "blue", size = 1.25) +  xlab("")
ggplot(data_long, aes(x = date, y = value)) +
geom_line(size = 1.25) +  xlab("")
View(data_long)
View(housing_data)
matplot(housing_data[, -1])
matplot(housing_data[, -1], type = "l")
ggplot(data_long, aes(x = date, y = value)) +
geom_line(size = 1.25) +  xlab("")
ggplot(data_long, aes(x = date, y = value, colour = variable)) +
geom_line(size = 1.25) +  xlab("")
ggplot(data_long, aes(x = date, y = value, colour = variable)) +
geom_line(size = 1.25) +  xlab("") + ylab("Units in thousands")
library(VAR)
library(vars)
X <- housing_data[, -1]
X <- matrix(housing_data[, -1])
model <- VAR(X)
X <- as.matrix(housing_data[, -1])
model <- VAR(X)
Bcoef(model)
model <- VAR(y = X, p = 4, type = "const")
Bcoef(model)
summary(model)
model_summary <- summary(model)
irf(model)
plot(irf(model))
plot(irf(model))
summary(model)
acf(resid(fit), 52)
acf(resid(model), 12)
acf(resid(model), 48)
acf(resid(model), 48)
X <- housing_data[, -1])
X <- housing_data[, -1]
model <- VAR(y = X, p = 4, type = "const")
summary(model)
acf(resid(model), 48)
acf(resid(model), 48)
# set up environment
rm(list = ls())
library(quantmod)
library(ggplot2)
library(reshape2)
library(vars)
theme_set(theme_bw(base_size = 18))
# pull data from FRED
getSymbols(c('HOUST', 'COMPUTSA'), src='FRED')
houscomp <- data.frame(date = as.Date(index(COMPUTSA)), houst = COMPUTSA)
# format/plot data
houst <- data.frame(date = as.Date(index(HOUST)), houst = HOUST)
housing_data <- merge(houst, houscomp, by = "date")
data_long <- melt(housing_data, id.vars = "date")
ggplot(data_long, aes(x = date, y = value, colour = variable)) +
geom_line(size = 1.25) +  xlab("") + ylab("Units in thousands")
# run VAR
X <- housing_data[, -1]
model <- VAR(y = X, p = 4, type = "const")
summary(model)
# examine residuals
acf(resid(model), 48)
serial.test(model, lags.pt=12, type = "PR.adjusted")
serial.test(model, lags.pt=12, type = "PT.adjusted")
spectrum(X, ..., method = c("pgram", "ar"))
spectrum(X,  method = c("pgram", "ar"))
fit.pr <- predict(model, n.ahead = 12, ci = 0.95)
fanchart(fit.pr)
fit.pr <- predict(model, n.ahead = 48, ci = 0.95)
fanchart(fit.pr)
fit.pr <- predict(model, n.ahead = 96, ci = 0.95)
fanchart(fit.pr)
12
fit.pr <- predict(model, n.ahead = 12, ci = 0.95)
fanchart(fit.pr)
X <- housing_data[, -1]
nobs <- nrow(housing_data)
data_long <- melt(housing_data, id.vars = "date")
ggplot(data_long, aes(x = date, y = value, colour = variable)) +
geom_line(size = 1.25) +  xlab("") + ylab("Units in thousands")
training_data <- housing_data[1:(nrow(housing_data)-1)]
training_data <- housing_data[1:(nobs-1)]
nobs <- nrow(housing_data)
training_data <- housing_data[1:(nobs-12)]
training_data <- housing_data[1:(nobs-12),]
training_data <- housing_data[1:(nobs-12), ]
rm(list = ls())
library(quantmod)
library(ggplot2)
library(reshape2)
library(vars)
theme_set(theme_bw(base_size = 18))
getSymbols(c('HOUST', 'COMPUTSA'), src='FRED')
houscomp <- data.frame(date = as.Date(index(COMPUTSA)), houst = COMPUTSA)
houst <- data.frame(date = as.Date(index(HOUST)), houst = HOUST)
housing_data <- merge(houst, houscomp, by = "date")
nobs <- nrow(housing_data)
data_long <- melt(housing_data, id.vars = "date")
ggplot(data_long, aes(x = date, y = value, colour = variable)) +
geom_line(size = 1.25) +  xlab("") + ylab("Units in thousands")
training_data <- housing_data[1:(nobs-12), ]
X <- housing_data[, -1]
model <- VAR(y = X, p = 4, type = "const")
summary(model)
acf(resid(model), 48)
serial.test(model, lags.pt=12, type = "PT.adjusted")
spectrum(X,  method = c("pgram", "ar"))
fit.pr <- predict(model, n.ahead = 12, ci = 0.95)
fanchart(fit.pr)
# set up environment
rm(list = ls())
library(quantmod)
library(ggplot2)
library(reshape2)
library(vars)
theme_set(theme_bw(base_size = 18))
# pull data from FRED
getSymbols(c('HOUST', 'COMPUTSA'), src='FRED')
houscomp <- data.frame(date = as.Date(index(COMPUTSA)), houst = COMPUTSA)
# format/plot data
houst <- data.frame(date = as.Date(index(HOUST)), houst = HOUST)
housing_data <- merge(houst, houscomp, by = "date")
nobs <- nrow(housing_data)
data_long <- melt(housing_data, id.vars = "date")
ggplot(data_long, aes(x = date, y = value, colour = variable)) +
geom_line(size = 1.25) +  xlab("") + ylab("Units in thousands")
# drop last 12 observations to be the out of sample forecast comparisons
training_data <- housing_data[1:(nobs-12), ]
# run VAR
X <- training_data[, -1]
model <- VAR(y = X, p = 4, type = "const")
summary(model)
# examine residuals
acf(resid(model), 48)
serial.test(model, lags.pt=12, type = "PT.adjusted")
spectrum(X,  method = c("pgram", "ar"))
# make prediction
fit.pr <- predict(model, n.ahead = 12, ci = 0.95)
fanchart(fit.pr)
rm(list = ls())
library(quantmod)
library(ggplot2)
library(reshape2)
library(vars)
theme_set(theme_bw(base_size = 18))
getSymbols(c('HOUST', 'COMPUTSA'), src='FRED')
houscomp <- data.frame(date = as.Date(index(COMPUTSA)), houst = COMPUTSA)
houst <- data.frame(date = as.Date(index(HOUST)), houst = HOUST)
housing_data <- merge(houst, houscomp, by = "date")
nobs <- nrow(housing_data)
data_long <- melt(housing_data, id.vars = "date")
ggplot(data_long, aes(x = date, y = value, colour = variable)) +
geom_line(size = 1.25) +  xlab("") + ylab("Units in thousands")
training_data <- housing_data[1:(nobs-12), ]
X <- training_data[, -1]
model <- VAR(y = X, p = 4, type = "const")
summary(model)
acf(resid(model), 48)
serial.test(model, lags.pt=12, type = "PT.adjusted")
spectrum(X,  method = c("pgram", "ar"))
fit.pr <- predict(model, n.ahead = 12, ci = 0.95)
fanchart(fit.pr)
x_t <- X[[1]]
x_t
i <- z <- complex(real = 0, imaginary = 1)
i
x <- X[[1]]
i <- z <- complex(real = 0, imaginary = 1)
t<- 45
x[t]
get_spec_density <- function(x, w){
Sw <- 0
for(t in 1:length(x)){
Sw <- Sw + exp(-i * w * t) * x[t]
}
}
pi
spec_density <- get_spec_density(x, pi/2)
spec_density
get_spec_density <- function(x, w){
Sw <- 0
for(t in 1:length(x)){
Sw <- Sw + exp(-i * w * t) * x[t]
}
}
spec_density <- get_spec_density(x, pi/2)
spec_density
t <- 6
Sw
exp(-i * w * t)
w = pi/4
exp(-i * w * t)
exp(-i * w * t) * x[t]
length(x)
get_spec_density <- function(x, w){
Sw <- 0
for(t in 1:length(x)){
Sw <- Sw + exp(-i * w * t) * x[t]
}
return(Sw)
}
spec_density <- get_spec_density(x, pi/2)
spec_density
range <- seq(0, 2*pi, by = 0.1)
range
spec_density <- get_spec_density(x, range)
spec_density
plot(range, spec_density)
range <- seq(0.1, 2*pi, by = 0.1)
spec_density <- get_spec_density(x, range)
plot(range, spec_density)
plot(range, spec_density, type = "l")
sqrt(as.complex(-1))
sqrt(-1)
as.complex(-1)
sqrt(as.complex(-1))
tab <- matrix(data = 4, nrow = 4, ncol = 3)
tab
tab <- matrix(data = NA, nrow = 4, ncol = 3)
tba
tab
colnames(tab) <- c("outcomes", "i = low", "i = high")
stargazer(tab)
stargazer::stargazer(tab)
library(Cairo)
#===============================================================================
# Macro PSET 2 Question 3
# Solow growth model
#===============================================================================
# parameters
delta <- 0.1;
alpha <- 1/3;
A <- 2/5
k0 <- 0.5
#===============================================================================
# Parts 1 and 2
#===============================================================================
# steady state
capital_ss <- function(A, delta, alpha){
return((A / (4 * delta))^(1/(1 - alpha)))
}
# verify that A = 2/5 gives kss = 1
capital_ss(A = 2/5, delta = 0.1, alpha = 1/3)
# capital differenc eequation
get_kp <- function(A, delta, k, alpha){
kp <- 0.25 * (A * k^alpha) + (1 - delta) * k
return(kp)
}
# set up simulation
k <- k0
periods <- 1:100
capital <- rep(NA, length(periods))
# run simulation
for(i in periods){
capital[i] <- get_kp(A, delta, k, alpha)
k <- capital[i]
}
tau <- min(which(capital > 0.9))
Cairo("write_up/solow_growth_alpha_low.png",type = "png", width =800, height = 600)
par(mar = c(5.4, 5.1, 1, 1))
par(ps = 30)
plot(periods, capital, type = "l", lwd = 4)
abline(h = 0.9, v = tau)
text(paste(tau, "periods to k =  0.9"), x = tau + 40, y =0.8)
dev.off()
#===============================================================================
# Parts 3 and 4
#===============================================================================
# recompute steady state and normalize A = 1
capital_ss(A = 2/5, delta = 0.1, alpha = 2/3)
k <- 0.5
# run simulation
for(i in periods){
capital[i] <- get_kp(A, delta, k, alpha = 2/3)
k <- capital[i]
}
tau <- min(which(capital > 0.9))
Cairo("write_up/solow_growth_alpha_high.png",type = "png", width =800, height = 600)
par(mar = c(5.4, 5.1, 1, 1))
par(ps = 30)
plot(periods, capital, type = "l", lwd = 4)
abline(h = 0.9, v = tau)
text(paste(tau, "periods to k =  0.9"), x = tau + 15 , y =0.8)
dev.off()
setwd("~/OneDrive - PennO365/Classes/2019_Spring/FNCE-924 (Intertemporal Macroeconomics and Finance/Problem Sets/Problem Set 3")
library(Cairo)
#===============================================================================
# Macro PSET 2 Question 3
# Solow growth model
#===============================================================================
# parameters
delta <- 0.1;
alpha <- 1/3;
A <- 2/5
k0 <- 0.5
#===============================================================================
# Parts 1 and 2
#===============================================================================
# steady state
capital_ss <- function(A, delta, alpha){
return((A / (4 * delta))^(1/(1 - alpha)))
}
# verify that A = 2/5 gives kss = 1
capital_ss(A = 2/5, delta = 0.1, alpha = 1/3)
# capital differenc eequation
get_kp <- function(A, delta, k, alpha){
kp <- 0.25 * (A * k^alpha) + (1 - delta) * k
return(kp)
}
# set up simulation
k <- k0
periods <- 1:100
capital <- rep(NA, length(periods))
# run simulation
for(i in periods){
capital[i] <- get_kp(A, delta, k, alpha)
k <- capital[i]
}
tau <- min(which(capital > 0.9))
Cairo("write_up/solow_growth_alpha_low.png",type = "png", width =800, height = 600)
par(mar = c(5.4, 5.1, 1, 1))
par(ps = 30)
plot(periods, capital, type = "l", lwd = 4)
abline(h = 0.9, v = tau)
text(paste(tau, "periods to k =  0.9"), x = tau + 40, y =0.8)
dev.off()
#===============================================================================
# Parts 3 and 4
#===============================================================================
# recompute steady state and normalize A = 1
capital_ss(A = 2/5, delta = 0.1, alpha = 2/3)
k <- 0.5
# run simulation
for(i in periods){
capital[i] <- get_kp(A, delta, k, alpha = 2/3)
k <- capital[i]
}
tau <- min(which(capital > 0.9))
Cairo("write_up/solow_growth_alpha_high.png",type = "png", width =800, height = 600)
par(mar = c(5.4, 5.1, 1, 1))
par(ps = 30)
plot(periods, capital, type = "l", lwd = 4)
abline(h = 0.9, v = tau)
text(paste(tau, "periods to k =  0.9"), x = tau + 15 , y =0.8)
dev.off()
library(Cairo)
#===============================================================================
# Macro PSET 2 Question 3
# Solow growth model
#===============================================================================
# parameters
delta <- 0.1;
alpha <- 1/3;
A <- 2/5
k0 <- 0.5
#===============================================================================
# Parts 1 and 2
#===============================================================================
# steady state
capital_ss <- function(A, delta, alpha){
return((A / (4 * delta))^(1/(1 - alpha)))
}
# verify that A = 2/5 gives kss = 1
capital_ss(A = 2/5, delta = 0.1, alpha = 1/3)
# capital differenc eequation
get_kp <- function(A, delta, k, alpha){
kp <- 0.25 * (A * k^alpha) + (1 - delta) * k
return(kp)
}
# set up simulation
k <- k0
periods <- 1:100
capital <- rep(NA, length(periods))
# run simulation
for(i in periods){
capital[i] <- get_kp(A, delta, k, alpha)
k <- capital[i]
}
tau <- min(which(capital > 0.9))
Cairo("write_up/solow_growth_alpha_low.png",type = "png", width =800, height = 600)
par(mar = c(5.4, 5.1, 1, 1))
par(ps = 30)
plot(periods, capital, type = "l", lwd = 4)
abline(h = 0.9, v = tau)
text(paste(tau, "periods to k =  0.9"), x = tau + 40, y =0.8)
dev.off()
#===============================================================================
# Parts 3 and 4
#===============================================================================
# recompute steady state and normalize A = 1
capital_ss(A = 2/5, delta = 0.1, alpha = 2/3)
k <- 0.5
# run simulation
for(i in periods){
capital[i] <- get_kp(A, delta, k, alpha = 2/3)
k <- capital[i]
}
tau <- min(which(capital > 0.9))
Cairo("write_up/solow_growth_alpha_high.png",type = "png", width =800, height = 600)
par(mar = c(5.4, 5.1, 1, 1))
par(ps = 30)
plot(periods, capital, type = "l", lwd = 4)
abline(h = 0.9, v = tau)
text(paste(tau, "periods to k =  0.9"), x = tau + 20 , y =0.8)
dev.off()
library(Cairo)
#===============================================================================
# Macro PSET 2 Question 3
# Solow growth model
#===============================================================================
# parameters
delta <- 0.1;
alpha <- 1/3;
A <- 2/5
k0 <- 0.5
#===============================================================================
# Parts 1 and 2
#===============================================================================
# steady state
capital_ss <- function(A, delta, alpha){
return((A / (4 * delta))^(1/(1 - alpha)))
}
# verify that A = 2/5 gives kss = 1
capital_ss(A = 2/5, delta = 0.1, alpha = 1/3)
# capital differenc eequation
get_kp <- function(A, delta, k, alpha){
kp <- 0.25 * (A * k^alpha) + (1 - delta) * k
return(kp)
}
# set up simulation
k <- k0
periods <- 1:100
capital <- rep(NA, length(periods))
# run simulation
for(i in periods){
capital[i] <- get_kp(A, delta, k, alpha)
k <- capital[i]
}
tau <- min(which(capital > 0.9))
Cairo("write_up/solow_growth_alpha_low.png",type = "png", width =800, height = 600)
par(mar = c(5.4, 5.1, 1, 1))
par(ps = 30)
plot(periods, capital, type = "l", lwd = 4)
abline(h = 0.9, v = tau)
text(paste(tau, "periods to k =  0.9"), x = tau + 40, y =0.8)
dev.off()
#===============================================================================
# Parts 3 and 4
#===============================================================================
# recompute steady state and normalize A = 1
capital_ss(A = 2/5, delta = 0.1, alpha = 2/3)
k <- 0.5
# run simulation
for(i in periods){
capital[i] <- get_kp(A, delta, k, alpha = 2/3)
k <- capital[i]
}
tau <- min(which(capital > 0.9))
Cairo("write_up/solow_growth_alpha_high.png",type = "png", width =800, height = 600)
par(mar = c(5.4, 5.1, 1, 1))
par(ps = 30)
plot(periods, capital, type = "l", lwd = 4)
abline(h = 0.9, v = tau)
text(paste(tau, "periods to k =  0.9"), x = tau + 25 , y =0.8)
dev.off()
